// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go

// Package processor is a generated GoMock package.
package processor

import (
	reflect "reflect"
	queue "ssv/internal/queue"

	gomock "github.com/golang/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockQueue) AddTask(validator int, taskType string, task queue.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTask", validator, taskType, task)
}

// AddTask indicates an expected call of AddTask.
func (mr *MockQueueMockRecorder) AddTask(validator, taskType, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockQueue)(nil).AddTask), validator, taskType, task)
}

// GetTask mocks base method.
func (m *MockQueue) GetTask(validator int, taskType string) *queue.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", validator, taskType)
	ret0, _ := ret[0].(*queue.Task)
	return ret0
}

// GetTask indicates an expected call of GetTask.
func (mr *MockQueueMockRecorder) GetTask(validator, taskType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockQueue)(nil).GetTask), validator, taskType)
}

// MockWork is a mock of Work interface.
type MockWork struct {
	ctrl     *gomock.Controller
	recorder *MockWorkMockRecorder
}

// MockWorkMockRecorder is the mock recorder for MockWork.
type MockWorkMockRecorder struct {
	mock *MockWork
}

// NewMockWork creates a new mock instance.
func NewMockWork(ctrl *gomock.Controller) *MockWork {
	mock := &MockWork{ctrl: ctrl}
	mock.recorder = &MockWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWork) EXPECT() *MockWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockWork) Do(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Do", message)
}

// Do indicates an expected call of Do.
func (mr *MockWorkMockRecorder) Do(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockWork)(nil).Do), message)
}
